const passport = require("passport");
const GoogleStrategy = require("passport-google-oauth20").Strategy;
//specific passport strategy for google
const keys = require("../config/keys");
const mongoose = require("mongoose");

const User = mongoose.model("users");
// mongoose.model(1arguement) = fetch something from mongoose
// this single argument statement is used instead of require models.users

//user arguement is what we just pulled from database (from googlestrategy callback function)

//this function takes the google profile ID (used to sign in) and serializes it by using its unique mongo id
passport.serializeUser((user, done) => {
    done(null, user.id); // isnt the google id, its the id generated by mongodb, we use user.id instead of googleID because you might use facebook etc
});

passport.deserializeUser((id, done) => {
    User.findById(id).then(user => {
        done(null, user);
    });
});

passport.use(
    new GoogleStrategy(
        {
            clientID: keys.googleClientID,
            clientSecret: keys.googleClientSecret,
            callbackURL: "/auth/google/callback",
            proxy: true
        }, //callback
        async (accessToken, refreshToken, profile, done) => {
            const existingUser = await User.findOne({ googleId: profile.id });

            if (existingUser) {
                // user exists
                return done(null, existingUser);
            }
            //dont have a user
            const user = await new User({ googleId: profile.id }).save();
            done(null, user);
            //when you call save it takes the new user instance and saves it to the db (ASYNC)
        }
    )
);
